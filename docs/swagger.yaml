definitions:
  dto.CreateTaskRequest:
    properties:
      description:
        type: string
      title:
        type: string
    type: object
  dto.LoginUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.RegisterUserRequest:
    properties:
      name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto.UpdateTaskRequest:
    properties:
      description:
        type: string
      status:
        $ref: '#/definitions/model.TaskStatus'
      title:
        type: string
    type: object
  model.Task:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      status:
        $ref: '#/definitions/model.TaskStatus'
      title:
        type: string
      updated_at:
        type: string
    type: object
  model.TaskStatus:
    enum:
    - pending
    - in-progress
    - completed
    - archived
    - deleted
    type: string
    x-enum-varnames:
    - Pending
    - InProgress
    - Completed
    - Archived
    - Deleted
  model.User:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login a user and get a JWT
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema: {}
      summary: Login a user
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "500":
          description: Internal Server Error
          schema: {}
      summary: Register a new user
      tags:
      - auth
  /api/task:
    get:
      description: Retrieve a list of all tasks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Task'
            type: array
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get all tasks
      tags:
      - task
    post:
      consumes:
      - application/json
      description: Create a new task
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Task'
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create a new task
      tags:
      - task
  /api/task/{id}:
    delete:
      description: Delete a task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Task'
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete a task
      tags:
      - task
    get:
      description: Retrieve a task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Task'
        "404":
          description: Not Found
          schema: {}
      summary: Get task by ID
      tags:
      - task
    patch:
      consumes:
      - application/json
      description: Update the title, description, or status of a task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Task Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Task'
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update a task
      tags:
      - task
swagger: "2.0"
